* ppx modifications
in ocaml we have a dune based ast rewriting preprocessor named ppx-introspector we are building.
it is a code generator written in ocaml that creates code from the
ppx asts extracted.
we want to modify this generator to visit the asts and generate custom code.
we first start by manually modifying examples of the code and then
presenting those changes to the output as a specificiation.
we require that all of the code is compilable and that we can compare the asts to get a detailed view of the differences
for the code and the ast and the execution path.
to accomplish this task, the super uses uses an AI LLM named mistral to
modify the code generator to regenerate the code of
the system and compare it to the manually edited code on the ast level
and then tasks the large language model to modify the generator code to create the specific
difference in the code, also it uses a specialized grammar to constrain the output

#+begin_src output

The AI LLM named Mistral was employed by the superuser of a code generation system to analyze and compare the manually modified code on an ast level. Through this process, Mistral was able to generate a new version of the code, incorporating specific differences that were requested by the user. Additionally, the language model employed a specialized grammar to ensure that the generated code adhered to the desired structure and syntax.
#+end_src

#+begin_src output
We have an OCaml code generation tool named Ppx-Introspector that produces custom code from abstract syntax tree (AST) extracts. However, we want to modify this generator to perform specific tasks on the ASTs before generating code. We will start by manually modifying examples and presenting them as specifications to compare with the output generated by the tool. To ensure compatibility and a detailed view of differences between the code, AST, and execution paths, our approach uses an AI LLM named Mistral to regenerate the code and compare it to the modified code on the AST level. Additionally, we employ a specialized grammar to limit the output generated by the language model.
#+end_src
