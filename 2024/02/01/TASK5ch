  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  f : C ⟦ copow, y ⟧
  ============================
   ((is_copower_enriched_map E' P x poset_copower_cocone y
     · poset_copower_map y) f = identity (E' ⦃ poset_copower_cocone, y ⦄) f)


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  f : C ⟦ copow, y ⟧
  ============================
   ((is_copower_enriched_map E' P x poset_copower_cocone y
     · poset_copower_map y) f = identity (E' ⦃ poset_copower_cocone, y ⦄) f)


Going to execute:
simple refine (p _ _ _ _ _ _ _ _) ||
  simple refine (p _ _ _ _ _ _ _ _ _) ||
    simple refine (p _ _ _ _ _ _ _ _ _ _) ||
      simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) || simple refine
             (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
HE : poset_enrichment_copows
P : poset_sym_mon_closed_cat
x : C
copow := poset_copows_coprod HE P x : Coproduct (pr11 P) C (λ _ : pr11 P, x)
copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
y : C
f : C ⟦ copow, y ⟧
The term "CoproductArrow_eq ?I ?C ?z ?x ?f ?g" has type
 "(∏ i : ?I, CoproductIn ?I ?C ?x i · ?f = CoproductIn ?I ?C ?x i · ?g)
  → ?f = ?g" while it is expected to have type
 "(is_copower_enriched_map E' P x poset_copower_cocone y
   · poset_copower_map y) f = identity (E' ⦃ poset_copower_cocone, y ⦄) f".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
HE : poset_enrichment_copows
P : poset_sym_mon_closed_cat
x : C
copow := poset_copows_coprod HE P x : Coproduct (pr11 P) C (λ _ : pr11 P, x)
copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
y : C
f : C ⟦ copow, y ⟧
The term "CoproductArrow_eq ?I ?C ?z ?x ?f ?g" has type
 "(∏ i : ?I, CoproductIn ?I ?C ?x i · ?f = CoproductIn ?I ?C ?x i · ?g)
  → ?f = ?g" while it is expected to have type
 "(is_copower_enriched_map E' P x poset_copower_cocone y
   · poset_copower_map y) f = identity (E' ⦃ poset_copower_cocone, y ⦄) f".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  f : C ⟦ copow, y ⟧
  ============================
   ((is_copower_enriched_map E' P x poset_copower_cocone y
     · poset_copower_map y) f = identity (E' ⦃ poset_copower_cocone, y ⦄) f)


Going to execute:
simple refine (p _ _ _ _ _ _ _ _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  f : C ⟦ copow, y ⟧
  ============================
   ((is_copower_enriched_map E' P x poset_copower_cocone y
     · poset_copower_map y) f = identity (E' ⦃ poset_copower_cocone, y ⦄) f)


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  f : C ⟦ copow, y ⟧
  ============================
   (∏ i : pr11 P,
    CoproductIn (pr11 P) C copow i
    · (is_copower_enriched_map E' P x poset_copower_cocone y
       · poset_copower_map y) f =
    CoproductIn (pr11 P) C copow i
    · identity (E' ⦃ poset_copower_cocone, y ⦄) f)


Going to execute:
intro i

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  f : C ⟦ copow, y ⟧
  ============================
   (∏ i : pr11 P,
    CoproductIn (pr11 P) C copow i
    · (is_copower_enriched_map E' P x poset_copower_cocone y
       · poset_copower_map y) f =
    CoproductIn (pr11 P) C copow i
    · identity (E' ⦃ poset_copower_cocone, y ⦄) f)


Going to execute:
<coq-core.plugins.ltac::intro@1> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  f : C ⟦ copow, y ⟧
  i : ?X559@{__:=?M0; __:=?M0; __:=?M0; __:=?M0; __:=
             ?M0; __:=?M0; __:=?M0; __:=?M0; __:=?M0; __:=
             ?M0}
  ============================
   (CoproductIn (pr11 P) C copow i
    · (is_copower_enriched_map E' P x poset_copower_cocone y
       · poset_copower_map y) f =
    CoproductIn (pr11 P) C copow i
    · identity (E' ⦃ poset_copower_cocone, y ⦄) f)


Going to execute:
apply (CoproductInCommutes _ _ _ copow)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  ============================
   (∏ w : C,
    poset_copower_map w
    · is_copower_enriched_map E' P x poset_copower_cocone w =
    identity (P ⊸ (E' ⦃ x, w ⦄)))


Going to execute:
intro y; use eq_monotone_function; intro f; use eq_monotone_function; intro i;
 cbn; apply (CoproductInCommutes _ _ _ copow)
Evaluated term: (CoproductInCommutes (pr11 P) C (λ _ : pr11 P, x) copow)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  ============================
   (∏ w : C,
    poset_copower_map w
    · is_copower_enriched_map E' P x poset_copower_cocone w =
    identity (P ⊸ (E' ⦃ x, w ⦄)))


Going to execute:
intro y; use eq_monotone_function; intro f; use eq_monotone_function; intro i;
 cbn

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  ============================
   (∏ w : C,
    poset_copower_map w
    · is_copower_enriched_map E' P x poset_copower_cocone w =
    identity (P ⊸ (E' ⦃ x, w ⦄)))


Going to execute:
intro y; use eq_monotone_function; intro f; use eq_monotone_function; intro i

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  ============================
   (∏ w : C,
    poset_copower_map w
    · is_copower_enriched_map E' P x poset_copower_cocone w =
    identity (P ⊸ (E' ⦃ x, w ⦄)))


Going to execute:
intro y; use eq_monotone_function; intro f; use eq_monotone_function

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  ============================
   (∏ w : C,
    poset_copower_map w
    · is_copower_enriched_map E' P x poset_copower_cocone w =
    identity (P ⊸ (E' ⦃ x, w ⦄)))


Going to execute:
intro y; use eq_monotone_function; intro f

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  ============================
   (∏ w : C,
    poset_copower_map w
    · is_copower_enriched_map E' P x poset_copower_cocone w =
    identity (P ⊸ (E' ⦃ x, w ⦄)))


Going to execute:
intro y; use eq_monotone_function

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  ============================
   (∏ w : C,
    poset_copower_map w
    · is_copower_enriched_map E' P x poset_copower_cocone w =
    identity (P ⊸ (E' ⦃ x, w ⦄)))


Going to execute:
intro y

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  ============================
   (∏ w : C,
    poset_copower_map w
    · is_copower_enriched_map E' P x poset_copower_cocone w =
    identity (P ⊸ (E' ⦃ x, w ⦄)))


Going to execute:
<coq-core.plugins.ltac::intro@1> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
use eq_monotone_function

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
simple_rapply p

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
fun p =>
  simple refine p ||
    simple refine (p _) ||
      simple refine (p _ _) ||
...                              simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _)
                               || simple refine
                               (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)

TcDebug (1) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
simple refine p ||
  simple refine (p _) ||
    simple refine (p _ _) ||
      simple refine (p _ _ _) ||
        simple refine (p _ _ _ _) ||
          simple refine (p _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _) ||
                  simple refine (p _ _ _ _ _ _ _ _ _) ||
                    simple refine (p _ _ _ _ _ _ _ _ _ _) ||
                      simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
                        simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
                          simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                            simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                              simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)

TcDebug (1) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
simple refine p
Level 1: evaluation returns
simple refine p ||
  simple refine (p _) ||
    simple refine (p _ _) ||
      simple refine (p _ _ _) ||
        simple refine (p _ _ _ _) ||
          simple refine (p _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _) ||
                  simple refine (p _ _ _ _ _ _ _ _ _) ||
                    simple refine (p _ _ _ _ _ _ _ _ _ _) ||
                      simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
                        simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
                          simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                            simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                              simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
where
p := eq_monotone_function
of type
uconstr of type tacvalue


TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
simple refine (p _) ||
  simple refine (p _ _) ||
    simple refine (p _ _ _) ||
      simple refine (p _ _ _ _) ||
        simple refine (p _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _ _) ||
                  simple refine (p _ _ _ _ _ _ _ _ _ _) ||
                    simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
                      simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
                        simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                          simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                            simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
HE : poset_enrichment_copows
P : poset_sym_mon_closed_cat
x : C
copow := poset_copows_coprod HE P x : Coproduct (pr11 P) C (λ _ : pr11 P, x)
copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
y : C
The term "eq_monotone_function" has type
 "∏ f g : monotone_function ?R₁ ?R₂, (∏ x0 : ?X₁, f x0 = g x0) → f = g"
while it is expected to have type
 "poset_copower_map y · is_copower_enriched_map E' P x poset_copower_cocone y =
  identity (P ⊸ (E' ⦃ x, y ⦄))".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
HE : poset_enrichment_copows
P : poset_sym_mon_closed_cat
x : C
copow := poset_copows_coprod HE P x : Coproduct (pr11 P) C (λ _ : pr11 P, x)
copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
y : C
The term "eq_monotone_function" has type
 "∏ f g : monotone_function ?R₁ ?R₂, (∏ x0 : ?X₁, f x0 = g x0) → f = g"
while it is expected to have type
 "poset_copower_map y · is_copower_enriched_map E' P x poset_copower_cocone y =
  identity (P ⊸ (E' ⦃ x, y ⦄))".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
simple refine (p _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
simple refine (p _ _) ||
  simple refine (p _ _ _) ||
    simple refine (p _ _ _ _) ||
      simple refine (p _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _ _ _) ||
                  simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
                    simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
                      simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                        simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                          simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
HE : poset_enrichment_copows
P : poset_sym_mon_closed_cat
x : C
copow := poset_copows_coprod HE P x : Coproduct (pr11 P) C (λ _ : pr11 P, x)
copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
y : C
The term "eq_monotone_function ?f" has type
 "∏ g : monotone_function ?R₁ ?R₂, (∏ x0 : ?X₁, ?f x0 = g x0) → ?f = g"
while it is expected to have type
 "poset_copower_map y · is_copower_enriched_map E' P x poset_copower_cocone y =
  identity (P ⊸ (E' ⦃ x, y ⦄))".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
HE : poset_enrichment_copows
P : poset_sym_mon_closed_cat
x : C
copow := poset_copows_coprod HE P x : Coproduct (pr11 P) C (λ _ : pr11 P, x)
copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
y : C
The term "eq_monotone_function ?f" has type
 "∏ g : monotone_function ?R₁ ?R₂, (∏ x0 : ?X₁, ?f x0 = g x0) → ?f = g"
while it is expected to have type
 "poset_copower_map y · is_copower_enriched_map E' P x poset_copower_cocone y =
  identity (P ⊸ (E' ⦃ x, y ⦄))".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
simple refine (p _ _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
simple refine (p _ _ _) ||
  simple refine (p _ _ _ _) ||
    simple refine (p _ _ _ _ _) ||
      simple refine (p _ _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
                  simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
                    simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                      simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) || simple
                       refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
HE : poset_enrichment_copows
P : poset_sym_mon_closed_cat
x : C
copow := poset_copows_coprod HE P x : Coproduct (pr11 P) C (λ _ : pr11 P, x)
copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
y : C
The term "eq_monotone_function ?f ?g" has type
 "(∏ x0 : ?X₁, ?f x0 = ?g x0) → ?f = ?g" while it is expected to have type
 "poset_copower_map y · is_copower_enriched_map E' P x poset_copower_cocone y =
  identity (P ⊸ (E' ⦃ x, y ⦄))".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
HE : poset_enrichment_copows
P : poset_sym_mon_closed_cat
x : C
copow := poset_copows_coprod HE P x : Coproduct (pr11 P) C (λ _ : pr11 P, x)
copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
y : C
The term "eq_monotone_function ?f ?g" has type
 "(∏ x0 : ?X₁, ?f x0 = ?g x0) → ?f = ?g" while it is expected to have type
 "poset_copower_map y · is_copower_enriched_map E' P x poset_copower_cocone y =
  identity (P ⊸ (E' ⦃ x, y ⦄))".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
simple refine (p _ _ _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (poset_copower_map y
    · is_copower_enriched_map E' P x poset_copower_cocone y =
    identity (P ⊸ (E' ⦃ x, y ⦄)))


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (∏ x0 : pr1 (P ⊸ (E' ⦃ x, y ⦄)),
    (poset_copower_map y
     · is_copower_enriched_map E' P x poset_copower_cocone y) x0 =
    identity (P ⊸ (E' ⦃ x, y ⦄)) x0)


Going to execute:
intro f

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  ============================
   (∏ x0 : pr1 (P ⊸ (E' ⦃ x, y ⦄)),
    (poset_copower_map y
     · is_copower_enriched_map E' P x poset_copower_cocone y) x0 =
    identity (P ⊸ (E' ⦃ x, y ⦄)) x0)


Going to execute:
<coq-core.plugins.ltac::intro@1> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  f : pr1hSet
        ?X601@{__:=?M0; __:=?M0; __:=?M0; __:=?M0; __:=
               ?M0; __:=?M0; __:=?M0; __:=?M0; __:=
               ?M0}
  ============================
   ((poset_copower_map y
     · is_copower_enriched_map E' P x poset_copower_cocone y) f =
    identity (P ⊸ (E' ⦃ x, y ⦄)) f)


Going to execute:
use eq_monotone_function

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  HE : poset_enrichment_copows
  P : ob poset_sym_mon_closed_cat
  x : ob C
  copow := poset_copows_coprod HE P x
        : Coproduct (pr11 P) C (λ _ : pr11 P, x)
  copow_in := λ i : pr11 P, poset_copows_in HE i : pr11 P → C ⟦ x, copow ⟧
  y : ob C
  f : pr1hSet
        ?X601@{__:=?M0; __:=?M0; __:=?M0; __:=?M0; __:=
