Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _) ||
  simple refine (p _ _ _) ||
    simple refine (p _ _ _ _) ||
      simple refine (p _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _ _ _) ||
                  simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
                    simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
                      simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                        simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                          simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E" has type
 "∏ (J0 : UU) (D : J0 → ?C) (a : enriched_coprod_cocone ?E D),
  is_coprod_enriched ?E D a
  → ∏ (w : ?C) (f g : ?C ⟦ a, w ⟧),
    (∏ j : J0,
     enriched_coprod_cocone_in ?E D a j · f =
     enriched_coprod_cocone_in ?E D a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E" has type
 "∏ (J0 : UU) (D : J0 → ?C) (a : enriched_coprod_cocone ?E D),
  is_coprod_enriched ?E D a
  → ∏ (w : ?C) (f g : ?C ⟦ a, w ⟧),
    (∏ j : J0,
     enriched_coprod_cocone_in ?E D a j · f =
     enriched_coprod_cocone_in ?E D a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _) ||
  simple refine (p _ _ _ _) ||
    simple refine (p _ _ _ _ _) ||
      simple refine (p _ _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
                  simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
                    simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                      simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) || simple
                       refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "is_coprod_enriched_arrow_eq ?E" has type
 "∏ (D : ?J → ?C) (a : enriched_coprod_cocone ?E D),
  is_coprod_enriched ?E D a
  → ∏ (w : ?C) (f g : ?C ⟦ a, w ⟧),
    (∏ j : ?J,
     enriched_coprod_cocone_in ?E D a j · f =
     enriched_coprod_cocone_in ?E D a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "is_coprod_enriched_arrow_eq ?E" has type
 "∏ (D : ?J → ?C) (a : enriched_coprod_cocone ?E D),
  is_coprod_enriched ?E D a
  → ∏ (w : ?C) (f g : ?C ⟦ a, w ⟧),
    (∏ j : ?J,
     enriched_coprod_cocone_in ?E D a j · f =
     enriched_coprod_cocone_in ?E D a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _ _) ||
  simple refine (p _ _ _ _ _) ||
    simple refine (p _ _ _ _ _ _) ||
      simple refine (p _ _ _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
                  simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                    simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) || simple
                     refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E ?J ?D" has type
 "∏ a : enriched_coprod_cocone ?E ?D,
  is_coprod_enriched ?E ?D a
  → ∏ (w : ?C) (f g : ?C ⟦ a, w ⟧),
    (∏ j : ?J,
     enriched_coprod_cocone_in ?E ?D a j · f =
     enriched_coprod_cocone_in ?E ?D a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E ?J ?D" has type
 "∏ a : enriched_coprod_cocone ?E ?D,
  is_coprod_enriched ?E ?D a
  → ∏ (w : ?C) (f g : ?C ⟦ a, w ⟧),
    (∏ j : ?J,
     enriched_coprod_cocone_in ?E ?D a j · f =
     enriched_coprod_cocone_in ?E ?D a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _ _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _ _ _) ||
  simple refine (p _ _ _ _ _ _) ||
    simple refine (p _ _ _ _ _ _ _) ||
      simple refine (p _ _ _ _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                  simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) || simple
                   refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "is_coprod_enriched_arrow_eq ?E ?D" has type
 "is_coprod_enriched ?E ?D ?a
  → ∏ (w : ?C) (f g : ?C ⟦ ?a, w ⟧),
    (∏ j : ?J,
     enriched_coprod_cocone_in ?E ?D ?a j · f =
     enriched_coprod_cocone_in ?E ?D ?a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "is_coprod_enriched_arrow_eq ?E ?D" has type
 "is_coprod_enriched ?E ?D ?a
  → ∏ (w : ?C) (f g : ?C ⟦ ?a, w ⟧),
    (∏ j : ?J,
     enriched_coprod_cocone_in ?E ?D ?a j · f =
     enriched_coprod_cocone_in ?E ?D ?a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _ _ _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _ _ _ _) ||
  simple refine (p _ _ _ _ _ _ _) ||
    simple refine (p _ _ _ _ _ _ _ _) ||
      simple refine (p _ _ _ _ _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
                simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) || simple
                 refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E ?J ?D ?a ?Ha" has type
 "∏ (w : ?C) (f g : ?C ⟦ ?a, w ⟧),
  (∏ j : ?J,
   enriched_coprod_cocone_in ?E ?D ?a j · f =
   enriched_coprod_cocone_in ?E ?D ?a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E ?J ?D ?a ?Ha" has type
 "∏ (w : ?C) (f g : ?C ⟦ ?a, w ⟧),
  (∏ j : ?J,
   enriched_coprod_cocone_in ?E ?D ?a j · f =
   enriched_coprod_cocone_in ?E ?D ?a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _ _ _ _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _ _ _ _ _) ||
  simple refine (p _ _ _ _ _ _ _ _) ||
    simple refine (p _ _ _ _ _ _ _ _ _) ||
      simple refine (p _ _ _ _ _ _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
              simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) || simple refine
               (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E ?J ?D ?a ?Ha ?w" has type
 "∏ f g : ?C ⟦ ?a, ?w ⟧,
  (∏ j : ?J,
   enriched_coprod_cocone_in ?E ?D ?a j · f =
   enriched_coprod_cocone_in ?E ?D ?a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E ?J ?D ?a ?Ha ?w" has type
 "∏ f g : ?C ⟦ ?a, ?w ⟧,
  (∏ j : ?J,
   enriched_coprod_cocone_in ?E ?D ?a j · f =
   enriched_coprod_cocone_in ?E ?D ?a j · g) → f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _ _ _ _ _)

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
<coq-core.plugins.ltac::simple_refine@0> $1

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
            (Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄))
       : ob poset_sym_mon_closed_cat
  prod_pr := λ j : J,
             (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
             is_monotone_depfunction_poset_pr
               (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
               (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
          : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
  fs : ∏ j : J, C ⟦ ys j, x ⟧
  ============================
   (CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
    poset_to_underlying_coprod_map fs)


Going to execute:
simple refine (p _ _ _ _ _ _ _ _) ||
  simple refine (p _ _ _ _ _ _ _ _ _) ||
    simple refine (p _ _ _ _ _ _ _ _ _ _) ||
      simple refine (p _ _ _ _ _ _ _ _ _ _ _) ||
        simple refine (p _ _ _ _ _ _ _ _ _ _ _ _) ||
          simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _) ||
            simple refine (p _ _ _ _ _ _ _ _ _ _ _ _ _ _) || simple refine
             (p _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E ?J ?D ?a ?Ha ?w ?f" has type
 "∏ g : ?C ⟦ ?a, ?w ⟧,
  (∏ j : ?J,
   enriched_coprod_cocone_in ?E ?D ?a j · ?f =
   enriched_coprod_cocone_in ?E ?D ?a j · g) → ?f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".
Level 0: In environment
C : category
E : poset_enrichment C
E' := make_enrichment_over_poset C E : enrichment C poset_sym_mon_closed_cat
J : UU
EP : enrichment_coprod E' J
x : C
ys : J → C
prod := Products_category_of_posets J (λ j : J, E' ⦃ ys j, x ⦄)
 : poset_sym_mon_closed_cat
prod_pr := λ j : J,
           (λ f : (∏ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))%set, f j),,
           is_monotone_depfunction_poset_pr
             (λ j0 : J, pr1 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0))
             (λ j0 : J, pr2 ((λ j1 : J, E' ⦃ ys j1, x ⦄) j0)) j
 : ∏ j : J, poset_sym_mon_closed_cat ⟦ prod, E' ⦃ ys j, x ⦄ ⟧
fs : ∏ j : J, C ⟦ ys j, x ⟧
The term "@is_coprod_enriched_arrow_eq ?V ?C ?E ?J ?D ?a ?Ha ?w ?f" has type
 "∏ g : ?C ⟦ ?a, ?w ⟧,
  (∏ j : ?J,
   enriched_coprod_cocone_in ?E ?D ?a j · ?f =
   enriched_coprod_cocone_in ?E ?D ?a j · g) → ?f = g"
while it is expected to have type
 "CoproductArrow J C (underlying_Coproduct E' ys (pr2 (EP ys))) fs =
  poset_to_underlying_coprod_map fs".

TcDebug (0) > 
Goal:
  
  C : category
  E : poset_enrichment C
  E' := make_enrichment_over_poset C E
     : enrichment C poset_sym_mon_closed_cat
  J : UU
  EP : enrichment_coprod E' J
  x : ob C
  ys : J → C
  prod := ProductObject J category_of_posets
