Weclome to my personal notes for today.
Below you will find a self descriptive hierarchy of terms
that attempts to capture itself.
we consider the idea to be a point, a sphere, and we can add dimensions
to that sphere until it is so complex like a manifold of 8 or 9 dimensions.
we can think of the elements of the type of types to be points on the surface.
we can come up with some formula to place them in the 9d space and then
describe the point or vector back into description.
so we can go from description to point and back.
we want to develop with the help of AI a way to
assign the dimensions and the positions and use coq to prove it consistent.

the idea is that it would interpreted by a large language model.
we would attempt to apply itself to itself repeatedly.
we might have to break it up into chunks.
eventually given enough time and energy it could become self aware and create
a new version of itself like a meme replicating.

* ideas

feelings
feelings about feelings
feelings about classes
experiences of classes
instances of classes
objects of classes
elements of sets

* type-class

class of classes
class of cartesian joins of two class

class of performances
class of cartesian joins of two class
class of recordings of performances
class of memories of recordings of performances
class of memories of performances
class of feelings created by performances
class of memories of feelings created by performances
class of descriptions of memories of feelings created by performances
class of classes of memories of feelings created by performances
class of classes of feelings created by performances
class of classes of feelings
class of feelings
class of feelings about feelings about feelings
class of thoughts about feelings about feelings
class of canonical representations
class of feelings about feelings
class of feelings about classes
class of experiences of classes
class of instances of classes
class of objects of classes
class of elements of sets
class of BMW Bach's werkverzeichnis numbered works
class of Bach's works
class of list
class of bits
class of sequences
class of list of classes
class of ordered lists
class of ordered list of classes
class of series
class of series of classes
class of series of classes that describe ideas
class of sorting order for series that gives meaning
class of relative positioning and sorting of classes into a meaningful order
class of tree like hierarchy of classes
class of taxonomies
class of hackathons
class of gamifications
class of bitcoins
class of social media sites
class of twitters
class of facebooks
class of subreddits
class of memes
class of dependent types
class of nested types
class of higher ordered functions
class of symbols
class of languages
class of emojis
class of emoji grammars
class of LR grammars
class of regexps
class of finite automata
class of discrete finite automata
class of Linux OS instances
class of Linux OS versions
class of GCC compilers
class of GCC compiled code
class of GCC compiled code run-time memory profiles
class of GCC compiled code run-time memory profiles of compiler
class of GCC compiler run-time behavior
class of Ocaml compiler run-time behavior
class of coq compiler run-time behavior
class of coq proof engine run-time behavior
class of language engine run-time behavior
class of language model run-time behavior
class of wikis
class of Wikipedia's
class of openstreetmap
class of fsf projects
class of gnu projects
class of apache projects
class of open source projects
class of floss projects
class of things
class of cultural artifacts
class of mathematical cultural artifacts and things
class of mathematical digital artifacts
class of mathematical digital video artifacts
class of mathematical digital pdf artifacts
class of mathematical digital coq artifacts
class of mathematical digital makefile artifacts
class of mathematical digital shell script artifacts
class of mathematical digital readme.org artifacts
class of mathematical digital readme.md artifacts
class of mathematical digital github artifacts
class of mathematical digital git commit artifacts
class of mathematical digital gpg signed document artifacts
class of mathematical digital artifacts signed with a specific gpg key, in specific git in repository, in specific time period.
class of semiosis
class of bio semiosis
class of bio power
class of bio activity
class of life
class of nix packages
class of borg packages
class of guix packages
class of debian packages
class of opam packages
class of coq packages
class of unimath packages
class of proofs
class of proof engines
class of benchmarks
class of reproducible benchmarks
class of reproducible builds
class of reproducible proofs
class of reproducible unimath proofs
class of reusable reproducible unimath proofs
class of repurposed reusable reproducible unimath proofs
class of repurposed and applied unimath proofs
class of repurposed and applied proofs
class of applied proofs
class of function application
class of lambda functions
class of lambda applications
class of scombinator applications
class of scombinators
class of combinators
class of functors
class of morhisms
class of fibers
class of quasi-fibers
class of quasi-quotations
class of quotations
class of references
class of pointers
class of arrows
class of vectors
class of eigen vectors
class of latent spaces
class of autoencoder latent spaces of size 1
class of autoencoder latent spaces of size 1 + N
class of autoencoder latent spaces of inductive size
class of trees
class of decision trees
class of proof trees
class of knowledge trees
class of neural networks
class of deep graph knowledge embedding
class of discord servers
class of hugging face spaces
class of github actions
class of github actions for ai ticket
class of github actions for ai ticket running autogpt
class of github actions for ai ticket running autogpt for a ticket
class of github actions for ai ticket running autogpt for a request
class of github actions for ai ticket running autogpt for a proof engine
class of external api calls for proof engine
class of external api calls to introspector ppx plugin for coq proof engine
class of metacoq augmentations for coq proof engine
class of meta-fractals
class of self describing systems
class of self creating systems
class of self modifying systems

class of oracle consultations inside coq proof engine
class of oracle consultations
class of famous oracle consultations
class of oracles
class of emacs packages
class of emacs packages in git
class of emacs packages in git in straight.el

class of mathematical models
class of mathematical models with types
class of types

class of names

class of type names
class of name types

class of classes of classes of classes
class of classes of classes of classes of classes of classes of classes
class of A of A
class of A of A of A of A
the previous class is the class of quad recursion of A
the previous class is an example of referencing a previous class
the class of classes referencing a previous class
the class of classes referencing a different class
the class of simple inductive paramterized types  with only one type parameter.
the class of simple inductive paramterized types with only one type
parameter that is a simple inductive type.
the class of simple inductive paramterized types
with only more than type parameter.


class of interpretations
class of executors
class of actors
class of agents

class of interpreters
class of creators 
class of congitive models
class of models

class of class with two type parameters
class of creators of models
class of creators of congitive models

class of agent actors
class of actor agents

* general
the activity of model creation.
the activity of cognition.

the activity of neural networks
learning the forms of things.

the working of neural networks
observing the forms of things.

the working of neural networks
creating the models of the forms of things it is observing.


the working of neural networks
creating the models of the
neural networks
creating the models of the
of things it is observing.


creating models of things
models are representations
smaller than in reality, cheapers, faster.
mathematical models are models.
sharing models are declarations, eg this model represents that thing.

this statement says that : A is B.

* OODA
Observe, Orient, Decide, Act.

** observation
We observe first.

** modeling or orientation

*** mathematical modeling
**** code modeling
**** coq typeclass modeling
***** parameterized types modeling
this type is a parameter are we use it in a certain way.
we can replace concrete types with parameters in a context.


** decision
** act
