* ideas of the day.

people have fuzzy ideas.
we can clarify them with llms.
we can brainstorm with llms.
we use focus points taken from those brainstorms.
we can sample the internals of the network during those brainstorms
to create intuitions. We can introspect over those intuitions.
See them as the tactic of consulting the oracle,
taken from the story of the oracle at Siwa in the story of Alexander.
we apply points of focus to abstract functions.
we apply abstract functions to points of focus.
we apply steps of abstract functions to individual points.
we can think of this as a multiplication of an object of type A to a schema B.
for every point in A we apply it to a list of points in our schema B.
this is a cartesian join with a simple schema.
we can take the type hierarchy and multiply that by the population.
we can view the population of an idea as the point in it, or the set of identities and other language structures.
we can ask llms to split up and chunk and extract these tokens.

** brainstorm
precipitation or raining of words.
flashes of insight as lighting.
rubbing of clouds against each other as friction.

*** ideas
**** generate ideas
*** list the verbs

*** limit the verbs.
choose your domain.
limit your scope.
**** domains :
***** unimath - mathematics
****** category theory
******* identities
******* morphisms
******** auto morphisms
****** group theory

******* symmetries
***** coq proof assistent
***** ocaml compiler 
***** gcc compiler
***** linux os
***** assembly language
***** machine language
***** physics
***** mathematics

focus your attention.
define your terms.

**** each verb represents a typeclass of places you can use that verb.

*** combinatatorics/permutations

** define terms
*** use, deploy, 
*** represent, encode, stand in place of
*** list, enumerate, visit
*** combine

*** limit/restrict
*** focus/direct attention
**** attach

*** revisit
**** detach
**** contemplate

** find opposites
*** create eigenvectors.

*** attach/detach
*** ascend/decend

** jacobs ladder
up and down
higher abstraction/lower abstraction
more awareness/less awareness
type/instance
object/property

** declare interface/typeclases
** define/implement interfaces/instantiate classes

** order terms.
*** give depedendancies.

* split out jobs from this text
** list the verbs
** define the verbs
** define the domain and range of verb
** think of each verb as a morphism

* ice game
compile the code into ice block representations of temparature where each block of
code is a different temparature of water, some is frozen and others is not
there are also nested ice blocks in water in ice in water.
entire topologies of ice that when time is allowed create interesting dynamics.
we can use this to simulate computation.
